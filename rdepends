#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright © 2023 SUSE LLC
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; version 2.1.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Author: Zoltán Balogh <zbalogh@suse.com>

# Summary: Simple tool to discover reverse dependency of packages with
# zypper. The method is to list the symbols the package provides and search
# for packages require the given symbol.

import subprocess
import os
import sys
import re
# Using dgettext to find out the locale translation of some zypper output
# Forcing the LC_ALL=C.UTF-8 would be the safest solution as soem exotic
# languages are using non parsable translations. But with that the tool
# would output some possible errors only in english. For most languages
# dgettext will do the trick
from gettext import dgettext


# Logging function if the script is used on tty

def log_text(text):
    if not verbose:
        return
    if consol_log:
        print("%s" % text)
        sys.stdout.write("%s\r" % text)
        sys.stdout.flush()
        sys.stdout.write("\033[K")  # Clear to the end of line
    else:
        print(text)

# Search for packages what require the given package


def requires_pkg(package):
    try:
        zypper_process = subprocess.Popen(["zypper",
                                           "--no-refresh",
                                           "--xmlout",
                                           "se",
                                           "--match-exact",
                                           "--requires-pkg",
                                           "%s" % package],
                                          stdin=subprocess.PIPE,
                                          stdout=subprocess.PIPE,
                                          stderr=subprocess.PIPE)
    except OSError as e:
        return False, "Could not execute zypper ({0}): {1}".format(e.errno,
                                                                   e.strerror)
    stdout_value, stderr_value = zypper_process.communicate()
    packages = set()
    for line in stdout_value.splitlines():
        name = dgettext('zypper', 'Name')[0:].lower()
        p = fr"^<solvable.*{name}=\"(\S+)\".*"
        m = re.match(p, line.decode('utf-8'))
        if m:
            if detailed:
                packages.add(line)
            else:
                packages.add(m.group(1))
    return True, packages

# recursive function to discover the reverse dependencies from as deep as
# necessary. Shows only one level reverse dependency if the --full-tree
# parameter is not used


def reverse_dependencies(package):
    global merged_result
    global depth
    log_text("Package: %s - %d" % (package, depth))
    fetched, search_result = requires_pkg(package)
    if not fetched:
        log_text(search_result)
        sys.exit()
    else:
        log_text("%s is required by: %s" % (package, search_result))
        for dependency_package in search_result:
            if dependency_package not in merged_result:
                merged_result.add(dependency_package)
                if full_tree:
                    if detailed:
                        name = dgettext('zypper', 'Name')[0:].lower()
                        p = fr"^<solvable.*{name}=\"(\S+)\".*"
                        m = re.match(p, dependency_package.decode('utf-8'))
                        if m:
                            depth = depth+1
                            reverse_dependencies(m.group(1))
                            depth = depth-1
                    else:
                        depth = depth+1
                        reverse_dependencies(dependency_package)
                        depth = depth-1
            else:
                log_text("Redundancy: %s" % dependency_package)


if os.isatty(sys.stdout.fileno()):
    consol_log = True
else:
    consol_log = False

# Handle process arguments. Getopt is not optimal in this case as it is
# better to keep te single package name parameter usage possible

depth = 0
detailed = False
full_tree = False
verbose = False
argset = set(sys.argv)
if ("--help" in argset) or ("-h" in argset):
    print("Reverse dependency listing tool for zypper based systems\n\n" +
          "Usage:\n\n" +
          "rdepends [package name] [--detailed|-d] [--full-tree|-f]\n\n" +
          "\tpackage name:\tThe package what the listed packages\n" +
          "\t\t\tdepend on\n" +
          "\t--detailed|-d:\tShow status, name, kind, edition, arch,\n" +
          "\t\t\trepository of the listed packages\n" +
          "\t--full-tree|-f:\tList all packages what indirectly depend\n" +
          "\t\t\ton the given package")
    sys.exit()

if ("--detailed" in argset) or ("-d" in argset):
    detailed = True
if ("--full-tree" in argset) or ("-f" in argset):
    full_tree = True
if ("--verbose" in argset) or ("-v" in argset):
    verbose = True

for arg in sys.argv:
    if arg != sys.argv[0] and re.match("^[^-].*", arg):
        root_package = arg
        break
try:
    root_package
except NameError:
    sys.exit()
merged_result = set()


# Call the reverse dependency resolving function with the root package

reverse_dependencies(root_package)

# Print the result of the process to the STDOUT.

for package in sorted(merged_result):
    print(package)
